#!/usr/bin/env bash

# corona
# Author: Michal Ľaš (xlasmi00)
# DU1 - IOS: 31.03.2022

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8

VALID_DATE='^([0-9][0-9][0-9][0-9]-(0[1-9]|1[0-2])-([0][1-9]|[1-2][0-9]|3[0-1]))\b'
INDEX=0
COMMAND=""
GRAPH_WIDTH=0
IS_GRAF=0
DATETIME_A="0001-01-01"
DATETIME_B="9999-09-09"
GENDER=0

##################### FUNCTIONS #########################

# Help function
print_help(){
    echo "CORONA: COVID-19 coronavirus infectious disease record analyzer"
    echo "SYNOPSIS: corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo "FILTERS:"
    echo "      -a DATE: Work only with records only after this date (including this date)"
    echo "      -b DATE: Work only with records only before this date (including this date)"
    echo "      -g M/Z: Work only with records fo male(M) or female(Z)"
    echo "      -s [WIDTH]: with commands gender, age, daily, monthly, yearly, countries, districts and regions instead of values prints histogram"
    echo "         - optional parameter WIDTH sets the length of the longest line"
    echo "      -h: prints help"
    echo "COMMANDS:"
    echo "      infected: counts the number of infections"
    echo "      merge: merges several log files into one"
    echo "      gender: lists the number of infected for each sex"
    echo "      age: lists statistics of the number of infected people by age"
    echo "      daily: lists statistics of infected people for each day"
    echo "      monthly: lists statistics of infected persons for individual month"
    echo "      yearly: lists statistics of infected persons for each year"
    echo "      countries: lists statistics of infected persons for individual countrie"
    echo "      districts: lists statistics of infected persons for individual district"
    echo "      regions: lists statistics of infected persons for individual region"
}

# Function return cat of .csv, .csv.gz, .csv.bz2 files
cat_func(){
    if [ -z "${FILE[0]}" ]; then
        while IFS= read -r line; do
            echo "$line"
        done
    else
        for i in "${FILE[@]}"; do
            if [[ $i == *.csv ]]; then
                cat "$i"
            elif [[ $i == *.csv.gz ]]; then
                gunzip -q -c "$i"
            elif [[ $i == *.csv.bz2 ]]; then
                bzip2 -q -c -d "$i"
            fi
        done
    fi
}

# Apply filters -g -a -b and also filter input from invalid data (invalid dates and ages)
filters(){
    awk -F ',' -v datetime_a="$DATETIME_A" -v datetime_b="$DATETIME_B" -v gender="$GENDER" '{
        gsub(/ /,"")
        year=substr($2,1,4)
        if ($0 !~ /^[[:space:]]*$/){
            if ((($3 >= 0) && ($3 !~ /\./)) || ($3 == "vek") || ($3 == "")){
                if ((($2 ~ /^([0-9]{4})-(0[13578]|1[02])-(0[1-9]|[1-2][0-9]|3[0-1])/) || 
                    ($2 ~ /^([0-9]{4})-(0[469]|1[1])-(0[1-9]|[1-2][0-9]|3[0])/) || 
                    (((((year % 4) == 0) && ((year % 100) != 0)) || (((year % 100) == 0) && ((year % 400) == 0))) &&
                    ($2 ~ /^([0-9]{4})-(0[2])-(0[1-9]|[1-2][0-9])/)) ||
                    ((!((((year % 4) == 0) && ((year % 100) != 0)) || (((year % 100) == 0) && ((year % 400) == 0)))) &&
                    ($2 ~ /^([0-9]{4})-(0[2])-(0[1-9]|1[0-9]|2[0-8])/)) ||
                    ($2 == "datum"))){
                    if ((($2 >= datetime_a) || ($2 == "datum")) && 
                        (($2 <= datetime_b) || ($2 == "datum")) &&
                        (($4 == gender) || ($4 == "pohlavi") || (gender == 0))){
                            print $0
                    }    
                }
                else{
                    print "Invalid date: ",$0 >"/dev/stderr"
                }
            }
            else{
                print "Invalid age: "$0 >"/dev/stderr"
            }
        }
    }'
}

# Function return number of infected people
f_infected(){
    awk -F ',' ' \
    { 
        if (($1 != "\n") && ($2 != "datum")) count++
    } END {
        printf("%d\n", count)
    }'
}

# Function marge *.csv files and print them on stdout
f_merge(){
    echo "id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
    awk -F ',' ' \
    {
        if ($2 != "datum" && $2 != "vek" && $2 != "pohlavi"){
            print $0
        }
    }'
}

# Function print number of male infected and number of female infected or histogram
f_gender(){
    awk -F ',' -v is_graf="$IS_GRAF" -v width="$GRAPH_WIDTH" ' \
    { 
        if (($1 != "\n") && ($4 != "pohlavi") && ($4 == "M")){
            count_m++
        }
        if (($1 != "\n") && ($4 != "pohlavi") && ($4 == "Z")){
            count_z++
        }
    } END {
        if (is_graf == 1){
            if (width > 0){

                maximum=count_m
                if (maximum < count_z) maximum=count_z

                width=maximum / width
            }
            else{
                width=100000
            }
            printf("M: ")
            c=1; while(c < (count_m / width)){printf "#"; c++}; printf "\n"
            printf("Z: ")
            c=1; while(c < (scount_z / width)){printf "#"; c++}; printf "\n"
        }
        else{
            printf("M: %d\n", count_m)
            printf("Z: %d\n", count_z)
        }
    }'
    
    echo "$RETURN"
}

# Function print number of infections in certain age interval or histogram
f_age(){
    awk -F ',' -v is_graf="$IS_GRAF" -v width="$GRAPH_WIDTH" ' \
    { 
        if (($1 != "\n") && ($3 != "vek") && (0 <= $3) && ($3 <= 5)){
            ++freq["count_0"]
        }
        if (($1 != "\n") && ($3 != "vek") && (6 <= $3) && ($3 <= 15)){
            ++freq["count_1"]
        }
        if (($1 != "\n") && ($3 != "vek") && (16 <= $3) && ($3 <= 25)){
            ++freq["count_2"]
        }
        if (($1 != "\n") && ($3 != "vek") && (26 <= $3) &&  ($3 <= 35)){
            ++freq["count_3"]
        }
        if (($1 != "\n") && ($3 != "vek") && (36 <= $3) && ($3 <= 45)){
            ++freq["count_4"]
        }
        if (($1 != "\n") && ($3 != "vek") && (46 <= $3) && ($3 <= 55)){
            ++freq["count_5"]
        }
        if (($1 != "\n") && ($3 != "vek") && (56 <= $3) && ($3 <= 65)){
            ++freq["count_6"]
        }
        if (($1 != "\n") && ($3 != "vek") && (66 <= $3) && ($3 <= 75)){
            ++freq["count_7"]
        }
        if (($1 != "\n") && ($3 != "vek") && (76 <= $3) && ($3 <= 85)){
            ++freq["count_8"]
        }
        if (($1 != "\n") && ($3 != "vek") && (86 <= $3) && ($3 <= 95)){
            ++freq["count_9"]
        }
        if (($1 != "\n") && ($3 != "vek") && (96 <= $3) && ($3 <= 105)){
            ++freq["count_10"]
        }
        if (($1 != "\n") && ($3 != "vek") && ($3 > 105)){
            ++freq["count_11"]
        }
        if (($1 != "\n") && ($3 != "vek") && ($3 == "")){
            ++freq["count_n"]
        }
    } END {
        if (is_graf == 1){
            if (width > 0){
                for(i in freq){
                    if(maximum < freq[i]){
                        maximum=freq[i]
                    }
                }        
                width=maximum / width
            }
            else{
                width=10000
            }
            printf("0-5   : ")
            c=1; while(c < (freq["count_0"] / width)){printf "#"; c++}; printf "\n"
            printf("6-15  : ")
            c=1; while(c < (freq["count_1"] / width)){printf "#"; c++}; printf "\n"
            printf("16-25 : ")
            c=1; while(c < (freq["count_2"] / width)){printf "#"; c++}; printf "\n"
            printf("26-35 : ")
            c=1; while(c < (freq["count_3"] / width)){printf "#"; c++}; printf "\n"
            printf("36-45 : ")
            c=1; while(c < (freq["count_4"] / width)){printf "#"; c++}; printf "\n"
            printf("46-55 : ")
            c=1; while(c < (freq["count_5"] / width)){printf "#"; c++}; printf "\n"
            printf("56-65 : ")
            c=1; while(c < (freq["count_6"] / width)){printf "#"; c++}; printf "\n"
            printf("66-75 : ")
            c=1; while(c < (freq["count_7"] / width)){printf "#"; c++}; printf "\n"
            printf("76-85 : ")
            c=1; while(c < (freq["count_8"] / width)){printf "#"; c++}; printf "\n"
            printf("86-95 : ")
            c=1; while(c < (freq["count_9"] / width)){printf "#"; c++}; printf "\n"
            printf("96-105: ")
            c=1; while(c < (freq["count_10"] / width)){printf "#"; c++}; printf "\n"
            printf(">105  : ")
            c=1; while(c < (freq["count_11"] / width)){printf "#"; c++}; printf "\n"
            printf("None  : ")
            c=1; while(c < (freq["count_n"] / width)){printf "#"; c++}; printf "\n"
        }
        else{
            printf("0-5   : %d\n", freq["count_0"])
            printf("6-15  : %d\n", freq["count_1"])
            printf("16-25 : %d\n", freq["count_2"])
            printf("26-35 : %d\n", freq["count_3"])
            printf("36-45 : %d\n", freq["count_4"])
            printf("46-55 : %d\n", freq["count_5"])
            printf("56-65 : %d\n", freq["count_6"])
            printf("66-75 : %d\n", freq["count_7"])
            printf("76-85 : %d\n", freq["count_8"])
            printf("86-95 : %d\n", freq["count_9"])
            printf("96-105: %d\n", freq["count_10"])
            printf(">105  : %d\n", freq["count_11"])
            printf("None  : %d\n", freq["count_n"])
        }
    }'
}

# Function print number of infection in certain day or histogram
f_daily(){
    awk -F ',' -v is_graf="$IS_GRAF" -v width="$GRAPH_WIDTH" ' \
    {
        if (($1 != "\n") && ($2 != "datum")){
            ++freq[$2]
        }

        } END {
            if (is_graf == 1){
                if (width > 0){
                    for(i in freq){
                        if(maximum < freq[i]){
                            maximum=freq[i]
                        }
                    }
                    width=maximum / width
                }
                else{
                    width=500
                }
                for (i in freq){
                    printf("%s: ",i)
                    c=1; while(c < (freq[i] / width)){printf "#"; c++}; printf "\n"
                }
            }
            else{
                for (i in freq) printf("%s: %d\n", i, freq[i])
            }
    }' | sort -nk1
}

# Function print number of infection in certain month or histogram
f_monthly(){
    awk -F ',' -v is_graf="$IS_GRAF" -v width="$GRAPH_WIDTH" ' \
    {
        if (($1 != "\n") && ($2 != "datum")){
            ++freq[substr($2,0,7)]
        }

        } END {
            if (is_graf == 1){
                if (width > 0){
                    for(i in freq){
                        if(maximum < freq[i]){
                            maximum=freq[i]
                        }
                    }
                    width=maximum / width
                }
                else{
                    width=10000
                }
                for (i in freq){
                    printf("%s: ",i)
                    c=1; while(c < (freq[i] / width)){printf "#"; c++}; printf "\n"
                }
            }
            else{
                for (i in freq) printf("%s: %d\n", i, freq[i])
            }
    }' | sort -nk1
}

# Function print number of infection in certain year or histogram
f_yearly(){
    awk -F ',' -v is_graf="$IS_GRAF" -v width="$GRAPH_WIDTH" ' \
    {
        if (($1 != "\n") && ($2 != "datum")){
            ++freq[substr($2,0,4)]
        }

        } END {
            if (is_graf == 1){
                if (width > 0){
                    for(i in freq){
                        if(maximum < freq[i]){
                            maximum=freq[i]
                        }
                    }
                    width=maximum / width
                }
                else{
                    width=100000
                }
                for (i in freq){
                    printf("%s: ",i)
                    c=1; while(c < (freq[i] / width)){printf "#"; c++}; printf "\n"
                }
            }
            else{
                for (i in freq) printf("%s: %d\n", i, freq[i])
            }
    }' | sort -nk1
}

# Function print number of infection in certain country or histogram
f_countries(){
    awk -F ',' -v is_graf="$IS_GRAF" -v width="$GRAPH_WIDTH" ' \
    {
        if (($1 != "\n") && ($8 != "nakaza_zeme_csu_kod") && ($8 != "CZ") && ($8 != "")){
            ++freq[$8]
        }

        } END {
            if (is_graf == 1){
                if (width > 0){
                    for(i in freq){
                        if(maximum < freq[i]){
                            maximum=freq[i]
                        }
                    }
                    width=maximum / width
                }
                else{
                    width=100
                }
                for (i in freq){
                    printf("%s: ",i)
                    c=1; while(c < (freq[i] / width)){printf "#"; c++}; printf "\n"
                }
            }
            else{
                for (i in freq) printf("%s: %d\n", i, freq[i])
            }
    }' | sort -nk1
}

# Function print number of infection in certain district or histogram
f_districts(){
    awk -F ',' -v is_graf="$IS_GRAF" -v width="$GRAPH_WIDTH" ' \
    {
        if (($1 != "\n") && ($6 != "okres_lau_kod")){
            if ($6 != ""){
                ++freq[$6]
            }
            else{
                ++freq["None"]
            }
        }

        } END {
            if (is_graf == 1){
                if (width > 0){
                    for(i in freq){
                        if(maximum < freq[i]){
                            maximum=freq[i]
                        }
                    }
                    width=maximum / width
                }
                else{
                    width=1000
                }
                for (i in freq){
                    printf("%s: ",i)
                    c=1; while(c < (freq[i] / width)){printf "#"; c++}; printf "\n"
                }
            }
            else{
                for (i in freq) printf("%s: %d\n", i, freq[i])
            }
    }' | sort -nk1
}

# Function print number of infection in certain region or histogram
f_regions(){
    awk -F ',' -v is_graf="$IS_GRAF" -v width="$GRAPH_WIDTH" ' \
    {
        if (($1 != "\n") && ($5 != "kraj_nuts_kod")){
            if ($5 != ""){
                ++freq[$5]
            }
            else{
                ++freq["None"]
            }
        }

        } END {
            if (is_graf == 1){
                if (width > 0){
                    for(i in freq){
                        if(maximum < freq[i]){
                            maximum=freq[i]
                        }
                    }
                    width=maximum / width
                }
                else{
                    width=10000
                }
                for (i in freq){
                    printf("%s: ",i)
                    c=1; while(c < (freq[i] / width)){printf "#"; c++}; printf "\n"
                }
            }
            else{
                for (i in freq) printf("%s: %d\n", i, freq[i])
            }
    }' | sort -nk1
}

####################### INPUT LOAD ###########################

while :; do
    case $1 in
        -h) 
            print_help
            exit 0
            ;;
        -a) if [ "$2" ]; then
                if [[ "$2" =~ $VALID_DATE ]]; then
                    if  date -d "$2" >/dev/null 2>&1; then 
                        DATETIME_A=$2
                    else 
                        echo "ERROR: Date is invalid" 1>&2
                        exit 1
                    fi
                else
                    echo "ERROR: Date is invalid" 1>&2
                    exit 1
                fi
                shift
            else
                echo "ERROR: No date given" 1>&2
                exit 1
            fi
            ;;
        -b) if [ "$2" ]; then
                if [[ "$2" =~ $VALID_DATE ]]; then
                    if  date -d "$2" >/dev/null 2>&1; then 
                        DATETIME_B=$2
                    else 
                        echo "ERROR: Date is invalid" 1>&2
                        exit 1
                    fi
                else
                    echo "ERROR: Date is invalid" 1>&2
                    exit 1
                fi
                shift
            else
                echo "ERROR: No date given" 1>&2
                exit 1
            fi
            ;;
        -g) if [ "$2" ]; then
                if [ "$2" == "M" ] || [ "$2" == "Z" ]; then
                    GENDER=$2
                else 
                    echo "ERROR: GENDER is invalid" 1>&2
                    exit 1
                fi
                shift
            else 
                echo "ERROR: No gender given" 1>&2
                exit 1
            fi 
            ;;
        -s) if  [[ $2 =~ ^([+-]?[0-9]+$) ]]; then
                if [ "$2" -gt 0 ]; then
                    GRAPH_WIDTH=$2
                    IS_GRAF=1
                else
                    echo "ERROR: Invalid argument of WIDTH" 1>&2
                    exit 1
                fi
                shift
            else
                # GRAPH_WIDTH default
                IS_GRAF=1
            fi
            ;;
        -?*) echo "ERROR: Unknow filter" 1>&2
            ;;
        infected | merge | gender | age | daily | monthly | yearly | countries | districts| regions)
            COMMAND=$1
            ;;
        *.csv)
            FILE[$INDEX]=$1
            ((INDEX++))
            ;;
        *.csv.gz)
            FILE[$INDEX]=$1
            ((INDEX++))
            ;;
        *.csv.bz2)
            FILE[$INDEX]=$1
            ((INDEX++))
            ;;
        ?*) echo "ERROR: unknow command" 1>&2
            exit 1
            ;;
        *) break;
    esac
    shift
done

# if no command -> echo input
if [ -z "$COMMAND" ]; then
    cat_func | filters | f_merge
    exit 0
fi

###################### COMMAND swtich #######################
case $COMMAND in
    infected)
        cat_func | filters | f_infected
        exit 0
        ;;
    merge)
        cat_func | filters | f_merge
        exit 0
        ;;
    gender)
        cat_func | filters | f_gender
        exit 0
        ;;
    age)
        cat_func | filters | f_age
        exit 0
        ;;
    daily)
        cat_func | filters | f_daily
        exit 0
        ;;
    monthly)
        cat_func | filters | f_monthly
        exit 0
        ;;
    yearly)
        cat_func | filters | f_yearly
        exit 0
        ;;
    countries)
        cat_func | filters | f_countries
        exit 0
        ;;
    districts)
        cat_func | filters | f_districts
        exit 0
        ;;
    regions)
        cat_func | filters | f_regions
        exit 0
        ;;
esac